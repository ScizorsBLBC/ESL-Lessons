#!/usr/bin/env node

/**
 * VOCABULARY DATA MIGRATION SCRIPT
 *
 * This script transforms the old vocabularyData.js structure into the new format
 * with vocabularyPacks containing 5-word and 10-word lesson packs.
 */

const fs = require('fs');
const path = require('path');

// Import the old vocabulary data
const { oldVocabularyData } = require('./src/data/oldVocabularyData.js');

// Step 1: Flatten all words from all lessons into a single array
function flattenAllWords() {
  const allWords = [];

  oldVocabularyData.lessons.forEach(lesson => {
    if (lesson.words && Array.isArray(lesson.words)) {
      lesson.words.forEach(word => {
        allWords.push({
          word: word.word,
          definition: word.definition,
          sampleSentence: word.sampleSentence,
          challengeSentence: word.challengeSentence
        });
      });
    }
  });

  return allWords;
}

// Step 2: Create lesson object for a word subset
function createLessonObject(wordSubset, packNumber, packType) {
  const packId = `pack-${packNumber}`;
  const wordCount = wordSubset.length;
  const title = `${wordCount}-Word Pack ${packNumber}`;

  // Create flashcards from word and definition
  const flashcards = wordSubset.map(w => ({
    front: w.word,
    back: `Definition: ${w.definition}`
  }));

  // CRITICAL FIX: Explicitly replace the target word with the blank using regex with word boundaries
  const fillInBlanksSentence = wordSubset.map(w => {
    // Create a global, case-insensitive regex pattern using word boundary (\b)
    const regex = new RegExp(`\\b${w.word}\\b`, 'gi');
    // Replace the word in the challenge sentence with the blank
    return w.challengeSentence.replace(regex, '_______');
  }).join(' '); // Join all prepared sentences into one large string

  const fillInBlanksWords = wordSubset.map(w => w.word);

  return {
    packId: packId,
    title: title,
    content: [
      // --- Intro Text Block ---
      {
        "blockId": `${packId}-intro-01`,
        "type": "text",
        "data": {
          "htmlContent": `<h2>${title}</h2><p>${wordCount}-word lesson focusing on essential vocabulary. Use the cards and contextual practice to master these terms.</p>`
        }
      },
      {
        "blockId": `${packId}-flashcard-02`,
        "type": "flashcard",
        "data": {
          "title": `${wordCount}-Word Flashcards (Pack ${packNumber})`,
          "cards": flashcards
        },
        // NOTE: Accessibility data should also be generated by the migration script.
      },
      {
        "blockId": `${packId}-fill-in-blanks-03`,
        "type": "fillInTheBlanks",
        "data": {
          "title": `Practice Pack ${packNumber}: Contextual Application`,
          "sentence": fillInBlanksSentence, // The sentence now correctly has the blanks
          "words": fillInBlanksWords        // The answers are the clean words
        }
      }
    ]
  };
}

// Step 3: Create vocabulary packs
function createVocabularyPacks(allWords) {
  const vocabularyPacks = {
    "5": [],
    "10": []
  };

  // Create 10-word packs (52 total)
  for (let i = 0; i < 52; i++) {
    const startIndex = i * 10;
    const endIndex = startIndex + 10;
    const wordSubset = allWords.slice(startIndex, endIndex);

    if (wordSubset.length > 0) {
      const lessonObject = createLessonObject(wordSubset, i + 1, '10');
      vocabularyPacks["10"].push(lessonObject);
    }
  }

  // Create 5-word packs (104 total)
  for (let i = 0; i < 104; i++) {
    const startIndex = i * 5;
    const endIndex = startIndex + 5;
    const wordSubset = allWords.slice(startIndex, endIndex);

    if (wordSubset.length > 0) {
      const lessonObject = createLessonObject(wordSubset, i + 1, '5');
      vocabularyPacks["5"].push(lessonObject);
    }
  }

  return vocabularyPacks;
}

// Step 4: Generate the complete new vocabulary data structure
function generateNewVocabularyData() {
  console.log('üîÑ Starting vocabulary data migration...');

  // Flatten all words
  const allWords = flattenAllWords();
  console.log(`üìä Found ${allWords.length} total words to migrate`);

  if (allWords.length !== 520) {
    console.warn(`‚ö†Ô∏è  Warning: Expected 520 words, but found ${allWords.length}`);
  }

  // Create vocabulary packs
  const vocabularyPacks = createVocabularyPacks(allWords);

  // Verify pack counts
  console.log(`üì¶ Generated ${vocabularyPacks["5"].length} 5-word packs`);
  console.log(`üì¶ Generated ${vocabularyPacks["10"].length} 10-word packs`);

  if (vocabularyPacks["5"].length !== 104) {
    console.warn(`‚ö†Ô∏è  Warning: Expected 104 5-word packs, but generated ${vocabularyPacks["5"].length}`);
  }

  if (vocabularyPacks["10"].length !== 52) {
    console.warn(`‚ö†Ô∏è  Warning: Expected 52 10-word packs, but generated ${vocabularyPacks["10"].length}`);
  }

  // Create the final structure
  const newVocabularyData = {
    lessonId: "essential-english-vocabulary-base",
    title: "Essential Academic and Business Vocabulary",
    subtitle: "Expand your high-frequency word knowledge for professional communication.",
    vocabularyPacks: vocabularyPacks
  };

  return newVocabularyData;
}

// Step 5: Write the migrated data to file
function writeMigratedData(data) {
  const outputPath = path.join(__dirname, 'src', 'data', 'vocabularyData.js');

  // Convert to JavaScript export format
  const jsContent = `export const vocabularyData = ${JSON.stringify(data, null, 2)};`;

  try {
    fs.writeFileSync(outputPath, jsContent);
    console.log(`‚úÖ Successfully migrated vocabulary data to ${outputPath}`);
    console.log(`üìà Migration Summary:`);
    console.log(`   - 5-word packs: ${data.vocabularyPacks["5"].length}`);
    console.log(`   - 10-word packs: ${data.vocabularyPacks["10"].length}`);
    console.log(`   - Total words processed: ${Object.values(data.vocabularyPacks).flat().reduce((acc, pack) => acc + pack.content[1].data.cards.length, 0)}`);
  } catch (error) {
    console.error(`‚ùå Error writing migrated data: ${error.message}`);
    process.exit(1);
  }
}

// Main execution
function main() {
  try {
    const newVocabularyData = generateNewVocabularyData();
    writeMigratedData(newVocabularyData);
    console.log('üéâ Vocabulary migration completed successfully!');
  } catch (error) {
    console.error(`‚ùå Migration failed: ${error.message}`);
    process.exit(1);
  }
}

// Run the migration
main();
